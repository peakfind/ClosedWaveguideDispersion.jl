var documenterSearchIndex = {"docs":
[{"location":"#ClosedWaveguideDispersion","page":"Home","title":"ClosedWaveguideDispersion","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for ClosedWaveguideDispersion.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#ClosedWaveguideDispersion.assemble_A-Tuple{Ferrite.CellValues, Ferrite.DofHandler, SparseArrays.SparseMatrixCSC, Float64}","page":"Home","title":"ClosedWaveguideDispersion.assemble_A","text":"assemble_A(cv::CellValues, dh::DofHandler, A::SparseMatrixCSC, α::Float64)\n\nTBW\n\n\n\n\n\n","category":"method"},{"location":"#ClosedWaveguideDispersion.assemble_B-Tuple{Ferrite.CellValues, Ferrite.DofHandler, SparseArrays.SparseMatrixCSC, Function}","page":"Home","title":"ClosedWaveguideDispersion.assemble_B","text":"assemble_B(cv::CellValues, dh::DofHandler, B::SparseMatrixCSC, n::Function)\n\nTBW\n\n\n\n\n\n","category":"method"},{"location":"#ClosedWaveguideDispersion.calc_diagram-Tuple{Ferrite.CellValues, Ferrite.DofHandler, Ferrite.ConstraintHandler, SparseArrays.SparseMatrixCSC, SparseArrays.SparseMatrixCSC, Function, Any}","page":"Home","title":"ClosedWaveguideDispersion.calc_diagram","text":"calc_diagram(cv::CellValues, dh::DofHandler, cst::ConstraintHandler, A::SparseMatrixCSC, B::SparseMatrixCSC, n::Function, bz; nevs::Int=6)\n\nTBW\n\n\n\n\n\n","category":"method"},{"location":"#ClosedWaveguideDispersion.plot_diagram-Tuple{Any, Any}","page":"Home","title":"ClosedWaveguideDispersion.plot_diagram","text":"plot_diagram(bz, μ;period=1.0, title=\"Dispersion Diagram\", xlabel=\"Brillouin zone\")\n\nTBW\n\n\n\n\n\n","category":"method"},{"location":"#ClosedWaveguideDispersion.setup_grid-Tuple{}","page":"Home","title":"ClosedWaveguideDispersion.setup_grid","text":"setup_grid(;lc=0.05, period=1.0, height=1.0)\n\nGenerate the mesh for the periodic cell by using Gmsh.\n\nArguments\n\nlc: the mesh size\nperiod: the period of the periodic closed waveguide\nheight: the height of the periodic closed waveguide\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"# case1.jl\nusing ClosedWaveguideDispersion\nusing Ferrite: Lagrange, RefTriangle\n\n# Parameters\nfunction n(x)\n   return 1.0 \nend\n\np = 1.0\nh = 1.0\nN = 100\n\n# Set up the grid \ngrid = setup_grid(lc=0.05, period=p, height=h)\n\n# Define the interpolation \nip = Lagrange{RefTriangle, 1}()\n\n# Set up the FE values: CellValues \ncv = setup_fevs(ip)\n\n# Set up the DofHandler \ndh = setup_dofs(grid, ip)\n\n# Set the boundary conditions\ncst = setup_bdcs(dh, period=p)\n\n# Allocate the matrices\nA = allocate_matries(dh, cst)\nB = allocate_matries(dh, cst)\n\n# Discretize the Brillouin zone\nbz = collect(range(-π/p, π/p, N))\n\n# Calculate the dispersion diagram\nμ = calc_diagram(cv, dh, cst, A, B, n, bz, nevs=7)\n\n# Plot the dispersion diagram\nplot_diagram(bz, μ, period=p)","category":"page"},{"location":"","page":"Home","title":"Home","text":"# case2.jl\nusing Ferrite: Lagrange, RefTriangle\nusing ClosedWaveguideDispersion\ne\n\n# Parameters\nfunction n(x)\n    r = sqrt(x[1]^2 + (x[2] - 0.5)^2) \n\n    if r <= 0.3\n        return 9.0\n    else \n        return 1.0\n    end\nend\n\np = 1.0\nh = 1.0\nN = 100\n\n# Set up the grid \ngrid = setup_grid(lc=0.05, period=p, height=h)\n\n# Define the interpolation \nip = Lagrange{RefTriangle, 1}()\n\n# Set up the FE values: CellValues \ncv = setup_fevs(ip)\n\n# Set up the DofHandler \ndh = setup_dofs(grid, ip)\n\n# Set the boundary conditions\ncst = setup_bdcs(dh, period=p)\n\n# Allocate the matrices\nA = allocate_matries(dh, cst)\nB = allocate_matries(dh, cst)\n\n# Discretize the Brillouin zone\nbz = collect(range(-π/p, π/p, N))\n\n# Calculate the dispersion diagram\nμ = calc_diagram(cv, dh, cst, A, B, n, bz, nevs=7)\n\n# Plot the dispersion diagram\nplot_diagram(bz, μ, period=p)","category":"page"},{"location":"","page":"Home","title":"Home","text":"# pa2.jl\nusing Gmsh\nusing Ferrite\nusing FerriteGmsh\nusing ClosedWaveguideDispersion\n\n# We need to customize our mesh and boundary conditions\nfunction my_grid(;lc=0.05, period=1.0, height=1.0, holewidth=0.5, holeheight=0.5)\n    # Initialize gmsh \n    gmsh.initialize()\n    gmsh.option.setNumber(\"General.Verbosity\", 2)\n    \n    # Add the points \n    p1 = gmsh.model.geo.addPoint(-period/2, 0, 0, lc)\n    p2 = gmsh.model.geo.addPoint(period/2, 0, 0, lc)\n    p3 = gmsh.model.geo.addPoint(period/2, height, 0, lc)\n    p4 = gmsh.model.geo.addPoint(-period/2, height, 0, lc)\n    p5 = gmsh.model.geo.addPoint(-holewidth/2, (height - holeheight)/2, 0, lc)\n    p6 = gmsh.model.geo.addPoint(holewidth/2, (height - holeheight)/2, 0, lc)\n    p7 = gmsh.model.geo.addPoint(holewidth/2, (height + holeheight)/2, 0, lc)\n    p8 = gmsh.model.geo.addPoint(-holewidth/2, (height + holeheight)/2, 0, lc)\n    \n    # Add the lines \n    l1 = gmsh.model.geo.addLine(p1, p2)\n    l2 = gmsh.model.geo.addLine(p2, p3)\n    l3 = gmsh.model.geo.addLine(p3, p4)\n    l4 = gmsh.model.geo.addLine(p4, p1)\n    l5 = gmsh.model.geo.addLine(p5, p6)\n    l6 = gmsh.model.geo.addLine(p6, p7)\n    l7 = gmsh.model.geo.addLine(p7, p8)\n    l8 = gmsh.model.geo.addLine(p8, p5)\n    \n    # Create loops and the domain \n    outerLoop = gmsh.model.geo.addCurveLoop([l1, l2, l3, l4])\n    innerLoop = gmsh.model.geo.addCurveLoop([l5, l6, l7, l8])\n    domain = gmsh.model.geo.addPlaneSurface([outerLoop, innerLoop])\n    \n    # Synchronize the model\n    gmsh.model.geo.synchronize()\n\n    # Create the physical domains \n    gmsh.model.addPhysicalGroup(1, [l1], -1, \"bottom\")\n    gmsh.model.addPhysicalGroup(1, [l2], -1, \"right\")\n    gmsh.model.addPhysicalGroup(1, [l3], -1, \"top\")\n    gmsh.model.addPhysicalGroup(1, [l4], -1, \"left\")\n    gmsh.model.addPhysicalGroup(1, [l5, l6, l7, l8], -1, \"Γ\")\n    gmsh.model.addPhysicalGroup(2, [domain], -1, \"Ω\")\n\n    # Set Periodic boundary condition\n    transform = [1, 0, 0, period, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]\n    gmsh.model.mesh.setPeriodic(1, [l2], [l4], transform) \n\n    # Generate a 2D mesh\n    gmsh.model.mesh.generate(2)\n\n    grid = mktempdir() do dir \n        path = joinpath(dir, \"hole.msh\")\n        gmsh.write(path)\n        togrid(path)\n    end\n   \n    # Finalize the Gmsh library\n    gmsh.finalize()\n    \n    return grid\nend \n\nfunction n(x)\n    return 1.0\nend\n\nfunction my_bdcs(dh::DofHandler; period=1.0)\n    cst = ConstraintHandler(dh)\n    \n    # Periodic boundary condition on the left and right \n    # side of the periodic cell\n    pfacets = collect_periodic_facets(dh.grid, \"right\", \"left\", x -> x + Ferrite.Vec{2}((period, 0.0)))\n    pbc = PeriodicDirichlet(:u, pfacets)\n    add!(cst, pbc)\n    \n    # Set Dirichlet boundary condition on the inner boundary\n    dfacets = getfacetset(dh.grid, \"Γ\")\n    dbc = Dirichlet(:u, dfacets, x -> 0)\n    add!(cst, dbc)\n    \n    close!(cst)\nend\n\np = 1.0\nh = 1.0\nhw = 0.5\nhh = 0.5\nN = 150\n\n# Set up the grid \ngrid = my_grid(lc=0.05, period=p, height=h, holewidth=hw, holeheight=hh)\n\n# Define the interpolation \nip = Lagrange{RefTriangle, 1}()\n\n# Set up the FE values: CellValues \ncv = setup_fevs(ip)\n\n# Set up the DofHandler \ndh = setup_dofs(grid, ip)\n\n# Set the boundary conditions\ncst = my_bdcs(dh, period=p)\n\n# Allocate the matrices\nA = allocate_matries(dh, cst)\nB = allocate_matries(dh, cst)\n\n# Discretize the Brillouin zone\nbz = collect(range(-π/p, 2π/p, N))\n\n# Calculate the dispersion diagram\nμ = calc_diagram(cv, dh, cst, A, B, n, bz, nevs=5)\n\n# Plot the dispersion diagram\nplot_diagram(bz, μ, period=p)","category":"page"},{"location":"","page":"Home","title":"Home","text":"# pa3.jl\nusing Ferrite: Lagrange, RefTriangle\nusing ClosedWaveguideDispersion\n# Parameters\nfunction n(x)\n    return 1.0 + 0.5 * cos(2π * x[1]) * sin(2π * x[2])\nend\n\np = 1.0\nh = 1.0\nN = 150\n\n# Set up the grid \ngrid = setup_grid(lc=0.05, period=p, height=h)\n\n# Define the interpolation \nip = Lagrange{RefTriangle, 1}()\n\n# Set up the FE values: CellValues \ncv = setup_fevs(ip)\n\n# Set up the DofHandler \ndh = setup_dofs(grid, ip)\n\n# Set the boundary conditions\ncst = setup_bdcs(dh, period=p)\n\n# Allocate the matrices\nA = allocate_matries(dh, cst)\nB = allocate_matries(dh, cst)\n\n# Discretize the Brillouin zone\nbz = collect(range(-π/p, 2π/p, N))\n\n# Calculate the dispersion diagram\nμ = calc_diagram(cv, dh, cst, A, B, n, bz, nevs=6)\n\n# Plot the dispersion diagram\nplot_diagram(bz, μ, period=p)","category":"page"}]
}
