var documenterSearchIndex = {"docs":
[{"location":"pa3/#PA-Three","page":"PA-Three","title":"PA-Three","text":"","category":"section"},{"location":"pa3/","page":"PA-Three","title":"PA-Three","text":"using Ferrite: Lagrange, RefTriangle\nusing ClosedWaveguideDispersion","category":"page"},{"location":"pa3/","page":"PA-Three","title":"PA-Three","text":"We define the parameters","category":"page"},{"location":"pa3/","page":"PA-Three","title":"PA-Three","text":"function n(x)\n    return 1.0 + 0.5 * cos(2π * x[1]) * sin(2π * x[2])\nend;\np = 1.0;\nh = 1.0;\nN = 150;\n\n# Set up the grid\ngrid = setup_grid(lc=0.05, period=p, height=h)\n\n# Define the interpolation\nip = Lagrange{RefTriangle, 1}()\n# Set up the FE values: CellValues\ncv = setup_fevs(ip)\n# Set up the DofHandler\ndh = setup_dofs(grid, ip)\n\n# Set the boundary conditions\ncst = setup_bdcs(dh, period=p)\n\n# Allocate the matrices\nA = allocate_matries(dh, cst)\nB = allocate_matries(dh, cst)\n\n# Discretize the Brillouin zone\nbz = collect(range(-π/p, 2π/p, N))\n\n# Calculate the dispersion diagram\nμ = calc_diagram(cv, dh, cst, A, B, n, bz, nevs=6)\n\n# Plot the dispersion diagram\nplot_diagram(bz, μ, period=p)","category":"page"},{"location":"pa3/","page":"PA-Three","title":"PA-Three","text":"","category":"page"},{"location":"pa3/","page":"PA-Three","title":"PA-Three","text":"This page was generated using Literate.jl.","category":"page"},{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"","category":"page"},{"location":"api/#ClosedWaveguideDispersion.assemble_A-Tuple{Ferrite.CellValues, Ferrite.DofHandler, SparseArrays.SparseMatrixCSC, Float64}","page":"API","title":"ClosedWaveguideDispersion.assemble_A","text":"assemble_A(cv::CellValues, dh::DofHandler, A::SparseMatrixCSC, α::Float64)\n\nTBW\n\n\n\n\n\n","category":"method"},{"location":"api/#ClosedWaveguideDispersion.assemble_B-Tuple{Ferrite.CellValues, Ferrite.DofHandler, SparseArrays.SparseMatrixCSC, Function}","page":"API","title":"ClosedWaveguideDispersion.assemble_B","text":"assemble_B(cv::CellValues, dh::DofHandler, B::SparseMatrixCSC, n::Function)\n\nTBW\n\n\n\n\n\n","category":"method"},{"location":"api/#ClosedWaveguideDispersion.calc_diagram-Tuple{Ferrite.CellValues, Ferrite.DofHandler, Ferrite.ConstraintHandler, SparseArrays.SparseMatrixCSC, SparseArrays.SparseMatrixCSC, Function, Any}","page":"API","title":"ClosedWaveguideDispersion.calc_diagram","text":"calc_diagram(cv::CellValues, dh::DofHandler, cst::ConstraintHandler, A::SparseMatrixCSC, B::SparseMatrixCSC, n::Function, bz; nevs::Int=6)\n\nTBW\n\n\n\n\n\n","category":"method"},{"location":"api/#ClosedWaveguideDispersion.plot_diagram-Tuple{Any, Any}","page":"API","title":"ClosedWaveguideDispersion.plot_diagram","text":"plot_diagram(bz, μ;period=1.0, title=\"Dispersion Diagram\", xlabel=\"Brillouin zone\")\n\nTBW\n\n\n\n\n\n","category":"method"},{"location":"api/#ClosedWaveguideDispersion.setup_bdcs-Tuple{Ferrite.DofHandler}","page":"API","title":"ClosedWaveguideDispersion.setup_bdcs","text":"setup_bdcs(dh::DofHandler; period=1.0)\n\nImpose the periodic boundary condition on the two vertical boundaries on the periodic cell\n\n\n\n\n\n","category":"method"},{"location":"api/#ClosedWaveguideDispersion.setup_grid-Tuple{}","page":"API","title":"ClosedWaveguideDispersion.setup_grid","text":"setup_grid(;lc=0.05, period=1.0, height=1.0)\n\nGenerate the mesh for the periodic cell by using Gmsh.\n\nArguments\n\nlc: the mesh size\nperiod: the period of the periodic closed waveguide\nheight: the height of the periodic closed waveguide\n\n\n\n\n\n","category":"method"},{"location":"homogeneous/#Homogeneous-case-with-Neumann-boundary-condition","page":"Homogeneous case with Neumann boundary condition","title":"Homogeneous case with Neumann boundary condition","text":"","category":"section"},{"location":"homogeneous/#Problem","page":"Homogeneous case with Neumann boundary condition","title":"Problem","text":"","category":"section"},{"location":"homogeneous/","page":"Homogeneous case with Neumann boundary condition","title":"Homogeneous case with Neumann boundary condition","text":"This problem in given as an example in [3].","category":"page"},{"location":"homogeneous/","page":"Homogeneous case with Neumann boundary condition","title":"Homogeneous case with Neumann boundary condition","text":"The function q(x_1 x_2) = 1 is a constant function.\nNeumann boundary condition on parital Omega","category":"page"},{"location":"homogeneous/#Code","page":"Homogeneous case with Neumann boundary condition","title":"Code","text":"","category":"section"},{"location":"homogeneous/","page":"Homogeneous case with Neumann boundary condition","title":"Homogeneous case with Neumann boundary condition","text":"First we should load ClosedWaveguideDispersion.jl for implemented functions. We also need Ferrite.jl to define the interpolation.","category":"page"},{"location":"homogeneous/","page":"Homogeneous case with Neumann boundary condition","title":"Homogeneous case with Neumann boundary condition","text":"using ClosedWaveguideDispersion\nusing Ferrite: Lagrange, RefTriangle","category":"page"},{"location":"homogeneous/","page":"Homogeneous case with Neumann boundary condition","title":"Homogeneous case with Neumann boundary condition","text":"Since we consider the homogeneous waveguide, we need to define the refraction index.","category":"page"},{"location":"homogeneous/","page":"Homogeneous case with Neumann boundary condition","title":"Homogeneous case with Neumann boundary condition","text":"# Refractive index\nfunction n(x)\n   return 1.0 \nend;\n\n# Period of the waveguide\np = 1.0;\n# Height of the waveguide\nh = 1.0;\n# Number of points in the discrete Brillouin zone\nN = 100;","category":"page"},{"location":"homogeneous/","page":"Homogeneous case with Neumann boundary condition","title":"Homogeneous case with Neumann boundary condition","text":"We use setup_grid to generate mesh for the periodic cell with period p and height h.","category":"page"},{"location":"homogeneous/","page":"Homogeneous case with Neumann boundary condition","title":"Homogeneous case with Neumann boundary condition","text":"# Set up the grid \ngrid = setup_grid(lc=0.05, period=p, height=h)","category":"page"},{"location":"homogeneous/","page":"Homogeneous case with Neumann boundary condition","title":"Homogeneous case with Neumann boundary condition","text":"Then we need to define the interpolation, CellValues and DofHandler which are needed by Ferrite.jl.","category":"page"},{"location":"homogeneous/","page":"Homogeneous case with Neumann boundary condition","title":"Homogeneous case with Neumann boundary condition","text":"# Define the interpolation \nip = Lagrange{RefTriangle, 1}()\n\n# Set up the FE values: CellValues \ncv = setup_fevs(ip)\n\n# Set up the DofHandler \ndh = setup_dofs(grid, ip);","category":"page"},{"location":"homogeneous/","page":"Homogeneous case with Neumann boundary condition","title":"Homogeneous case with Neumann boundary condition","text":"In this example, the Neumann boundary condition is satisfied naturally. So we only need to impose the periodic boundary condition in setup_bdcs.","category":"page"},{"location":"homogeneous/","page":"Homogeneous case with Neumann boundary condition","title":"Homogeneous case with Neumann boundary condition","text":" Set the boundary conditions\ncst = setup_bdcs(dh period=p)","category":"page"},{"location":"homogeneous/","page":"Homogeneous case with Neumann boundary condition","title":"Homogeneous case with Neumann boundary condition","text":"Now we should prepare for the assembly of the eigenvalue problem.","category":"page"},{"location":"homogeneous/","page":"Homogeneous case with Neumann boundary condition","title":"Homogeneous case with Neumann boundary condition","text":"# Allocate the matrices\nA = allocate_matries(dh, cst)\nB = allocate_matries(dh, cst)\n\n# Discretize the Brillouin zone\nbz = collect(range(-π/p, π/p, N))","category":"page"},{"location":"homogeneous/","page":"Homogeneous case with Neumann boundary condition","title":"Homogeneous case with Neumann boundary condition","text":"In calc_diagram, B is generated only one time and A is generated with respect to alpha in bz. Then we solve the generalized linear eigenvalue problem Ax = mu Bx at each alpha.","category":"page"},{"location":"homogeneous/","page":"Homogeneous case with Neumann boundary condition","title":"Homogeneous case with Neumann boundary condition","text":"# Calculate the dispersion diagram\nμ = calc_diagram(cv, dh, cst, A, B, n, bz, nevs=7)","category":"page"},{"location":"homogeneous/","page":"Homogeneous case with Neumann boundary condition","title":"Homogeneous case with Neumann boundary condition","text":"Finally, we can plot our dispersion diagram.:","category":"page"},{"location":"homogeneous/","page":"Homogeneous case with Neumann boundary condition","title":"Homogeneous case with Neumann boundary condition","text":"# Plot the dispersion diagram\nplot_diagram(bz, μ, period=p)","category":"page"},{"location":"homogeneous/#Plain-code","page":"Homogeneous case with Neumann boundary condition","title":"Plain code","text":"","category":"section"},{"location":"homogeneous/","page":"Homogeneous case with Neumann boundary condition","title":"Homogeneous case with Neumann boundary condition","text":"using ClosedWaveguideDispersion\nusing Ferrite: Lagrange, RefTriangle\n\n# Parameters\nfunction n(x)\n   return 1.0 \nend\n\np = 1.0\nh = 1.0\nN = 100\n\n# Set up the grid \ngrid = setup_grid(lc=0.05, period=p, height=h)\n\n# Define the interpolation \nip = Lagrange{RefTriangle, 1}()\n\n# Set up the FE values: CellValues \ncv = setup_fevs(ip)\n\n# Set up the DofHandler \ndh = setup_dofs(grid, ip)\n\n# Set the boundary conditions\ncst = setup_bdcs(dh, period=p)\n\n# Allocate the matrices\nA = allocate_matries(dh, cst)\nB = allocate_matries(dh, cst)\n\n# Discretize the Brillouin zone\nbz = collect(range(-π/p, π/p, N))\n\n# Calculate the dispersion diagram\nμ = calc_diagram(cv, dh, cst, A, B, n, bz, nevs=7)\n\n# Plot the dispersion diagram\nplot_diagram(bz, μ, period=p)","category":"page"},{"location":"references/#References","page":"References","title":"References","text":"","category":"section"},{"location":"references/","page":"References","title":"References","text":"S. Fliss and P. Joly. Solutions of the time-harmonic wave equation in periodic               waveguides: asymptotic behaviour and radiation condition. Arch. Ration. Mech. Anal. 219, 349–386 (2016).\n\n\n\nW. Dörfler, A. Lechleiter, M. Plum, G. Schneider and C. Wieners. Photonic crystals: Mathematical analysis and numerical approximation. Vol. 42 (Springer Science & Business Media, 2011).\n\n\n\nR. Zhang. Numerical methods for scattering problems in periodic               waveguides. Numer. Math. 148, 959–996 (2021).\n\n\n\n","category":"page"},{"location":"pa2/#PA-Two","page":"PA-Two","title":"PA-Two","text":"","category":"section"},{"location":"pa2/#Problem","page":"PA-Two","title":"Problem","text":"","category":"section"},{"location":"pa2/#Code","page":"PA-Two","title":"Code","text":"","category":"section"},{"location":"pa2/","page":"PA-Two","title":"PA-Two","text":"For this example, we also need to load Gmsh and FerriteGmsh to generate the mesh","category":"page"},{"location":"pa2/","page":"PA-Two","title":"PA-Two","text":"using Gmsh\nusing Ferrite\nusing FerriteGmsh\nusing ClosedWaveguideDispersion","category":"page"},{"location":"pa2/","page":"PA-Two","title":"PA-Two","text":"We need to customize our mesh and boundary conditions","category":"page"},{"location":"pa2/","page":"PA-Two","title":"PA-Two","text":"function my_grid(;lc=0.05, period=1.0, height=1.0, holewidth=0.5, holeheight=0.5)\n    # Initialize gmsh\n    gmsh.initialize()\n    gmsh.option.setNumber(\"General.Verbosity\", 2)\n\n    # Add the points\n    p1 = gmsh.model.geo.addPoint(-period/2, 0, 0, lc)\n    p2 = gmsh.model.geo.addPoint(period/2, 0, 0, lc)\n    p3 = gmsh.model.geo.addPoint(period/2, height, 0, lc)\n    p4 = gmsh.model.geo.addPoint(-period/2, height, 0, lc)\n    p5 = gmsh.model.geo.addPoint(-holewidth/2, (height - holeheight)/2, 0, lc)\n    p6 = gmsh.model.geo.addPoint(holewidth/2, (height - holeheight)/2, 0, lc)\n    p7 = gmsh.model.geo.addPoint(holewidth/2, (height + holeheight)/2, 0, lc)\n    p8 = gmsh.model.geo.addPoint(-holewidth/2, (height + holeheight)/2, 0, lc)\n\n    # Add the lines\n    l1 = gmsh.model.geo.addLine(p1, p2)\n    l2 = gmsh.model.geo.addLine(p2, p3)\n    l3 = gmsh.model.geo.addLine(p3, p4)\n    l4 = gmsh.model.geo.addLine(p4, p1)\n    l5 = gmsh.model.geo.addLine(p5, p6)\n    l6 = gmsh.model.geo.addLine(p6, p7)\n    l7 = gmsh.model.geo.addLine(p7, p8)\n    l8 = gmsh.model.geo.addLine(p8, p5)\n\n    # Create loops and the domain\n    outerLoop = gmsh.model.geo.addCurveLoop([l1, l2, l3, l4])\n    innerLoop = gmsh.model.geo.addCurveLoop([l5, l6, l7, l8])\n    domain = gmsh.model.geo.addPlaneSurface([outerLoop, innerLoop])\n\n    # Synchronize the model\n    gmsh.model.geo.synchronize()\n\n    # Create the physical domains\n    gmsh.model.addPhysicalGroup(1, [l1], -1, \"bottom\")\n    gmsh.model.addPhysicalGroup(1, [l2], -1, \"right\")\n    gmsh.model.addPhysicalGroup(1, [l3], -1, \"top\")\n    gmsh.model.addPhysicalGroup(1, [l4], -1, \"left\")\n    gmsh.model.addPhysicalGroup(1, [l5, l6, l7, l8], -1, \"Γ\")\n    gmsh.model.addPhysicalGroup(2, [domain], -1, \"Ω\")\n\n    # Set Periodic boundary condition\n    transform = [1, 0, 0, period, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]\n    gmsh.model.mesh.setPeriodic(1, [l2], [l4], transform)\n\n    # Generate a 2D mesh\n    gmsh.model.mesh.generate(2)\n\n    grid = mktempdir() do dir\n        path = joinpath(dir, \"hole.msh\")\n        gmsh.write(path)\n        togrid(path)\n    end\n\n    # Finalize the Gmsh library\n    gmsh.finalize()\n\n    return grid\nend;\n\nfunction n(x)\n    return 1.0\nend;\nnothing #hide","category":"page"},{"location":"pa2/","page":"PA-Two","title":"PA-Two","text":"We need to implement a new function to impose the boundary condition.","category":"page"},{"location":"pa2/","page":"PA-Two","title":"PA-Two","text":"function my_bdcs(dh::DofHandler; period=1.0)\n    cst = ConstraintHandler(dh)\n\n    # Periodic boundary condition on the left and right\n    # side of the periodic cell\n    pfacets = collect_periodic_facets(dh.grid, \"right\", \"left\", x -> x + Ferrite.Vec{2}((period, 0.0)))\n    pbc = PeriodicDirichlet(:u, pfacets)\n    add!(cst, pbc)\n\n    # Set Dirichlet boundary condition on the inner boundary\n    dfacets = getfacetset(dh.grid, \"Γ\")\n    dbc = Dirichlet(:u, dfacets, x -> 0)\n    add!(cst, dbc)\n\n    close!(cst)\nend","category":"page"},{"location":"pa2/","page":"PA-Two","title":"PA-Two","text":"Set parameters","category":"page"},{"location":"pa2/","page":"PA-Two","title":"PA-Two","text":"p = 1.0;\nh = 1.0;\nhw = 0.5;\nhh = 0.5;\nN = 150;\nnothing #hide","category":"page"},{"location":"pa2/","page":"PA-Two","title":"PA-Two","text":"Set up the grid","category":"page"},{"location":"pa2/","page":"PA-Two","title":"PA-Two","text":"grid = my_grid(lc=0.05, period=p, height=h, holewidth=hw, holeheight=hh)","category":"page"},{"location":"pa2/","page":"PA-Two","title":"PA-Two","text":"basic steps need by Ferrite.jl","category":"page"},{"location":"pa2/","page":"PA-Two","title":"PA-Two","text":"# Define the interpolation\nip = Lagrange{RefTriangle, 1}()\n# Set up the FE values: CellValues\ncv = setup_fevs(ip)\n# Set up the DofHandler\ndh = setup_dofs(grid, ip)\n\n# Set the boundary conditions\ncst = my_bdcs(dh, period=p)\n\n# Allocate the matrices\nA = allocate_matries(dh, cst)\nB = allocate_matries(dh, cst)\n\n# Discretize the Brillouin zone\nbz = collect(range(-π/p, 2π/p, N))\n\n# Calculate the dispersion diagram\nμ = calc_diagram(cv, dh, cst, A, B, n, bz, nevs=5)\n\n# Plot the dispersion diagram\nplot_diagram(bz, μ, period=p)","category":"page"},{"location":"pa2/","page":"PA-Two","title":"PA-Two","text":"","category":"page"},{"location":"pa2/","page":"PA-Two","title":"PA-Two","text":"This page was generated using Literate.jl.","category":"page"},{"location":"zhang_case2/#Inhomogeneous-case","page":"Inhomogeneous case","title":"Inhomogeneous case","text":"","category":"section"},{"location":"zhang_case2/","page":"Inhomogeneous case","title":"Inhomogeneous case","text":"using Ferrite: Lagrange, RefTriangle\nusing ClosedWaveguideDispersion","category":"page"},{"location":"zhang_case2/","page":"Inhomogeneous case","title":"Inhomogeneous case","text":"Parameters","category":"page"},{"location":"zhang_case2/","page":"Inhomogeneous case","title":"Inhomogeneous case","text":"function n(x)\n    r = sqrt(x[1]^2 + (x[2] - 0.5)^2)\n\n    if r <= 0.3\n        return 9.0\n    else\n        return 1.0\n    end\nend;\np = 1.0;\nh = 1.0;\nN = 100;\n\n# Set up the grid\ngrid = setup_grid(lc=0.05, period=p, height=h)\n\n# Define the interpolation\nip = Lagrange{RefTriangle, 1}()\n# Set up the FE values: CellValues\ncv = setup_fevs(ip)\n# Set up the DofHandler\ndh = setup_dofs(grid, ip)\n\n# Set the boundary conditions\ncst = setup_bdcs(dh, period=p)\n\n# Allocate the matrices\nA = allocate_matries(dh, cst)\nB = allocate_matries(dh, cst)\n\n# Discretize the Brillouin zone\nbz = collect(range(-π/p, π/p, N))\n\n# Calculate the dispersion diagram\nμ = calc_diagram(cv, dh, cst, A, B, n, bz, nevs=7)\n\n# Plot the dispersion diagram\nplot_diagram(bz, μ, period=p)","category":"page"},{"location":"zhang_case2/","page":"Inhomogeneous case","title":"Inhomogeneous case","text":"","category":"page"},{"location":"zhang_case2/","page":"Inhomogeneous case","title":"Inhomogeneous case","text":"This page was generated using Literate.jl.","category":"page"},{"location":"#ClosedWaveguideDispersion","page":"Home","title":"ClosedWaveguideDispersion","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for ClosedWaveguideDispersion.","category":"page"},{"location":"#Usage","page":"Home","title":"Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you want to use ClosedWaveguideDispersion.jl, please press ] in the REPL to  enter the pkg> mode. Then enter","category":"page"},{"location":"","page":"Home","title":"Home","text":"pkg> add https://github.com/peakfind/ClosedWaveguideDispersion.jl.git","category":"page"},{"location":"#Structure-of-this-documentation","page":"Home","title":"Structure of this documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Tutorial presents a basic framework for computing dispersion diagrams of periodic closed waveguides. \nExamples contains problems with different domains or boundary conditions. This part can help you to implement your own code for compuation of disperison diagrams.","category":"page"},{"location":"tutorial/#Tutorial","page":"Tutorial","title":"Tutorial","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"In this tutorial, we will present some basic knowledge of dispersion digrams and use an example to show how ClosedWaveguideDispersion.jl works.","category":"page"},{"location":"tutorial/#Problem","page":"Tutorial","title":"Problem","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Let Omega = mathbbR times (0 1) subset mathbbR^2 be a closed waveguide with the boundary","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"partial Omega = x = (x_1 x_2) in mathbbR^2  x_2 = 0 text or  x_2 = 1","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Suppose Omega is filled by periodic medium with period p. The medium can be characterized by the real-valued refactive index q(x_1 x_2) satisfying","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"q(x_1 + p x_2) = q(x_1 x_2) q geqslant c  0 forall (x_1 x_2) in Omega","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Moreover, we assume that q(x_1 x_2) in L^infty(Omega).","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"The wave propagation in the periodic closed waveguide is modeled by the following boundary value problem","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"beginalign*\n    Delta u + k^2q(x_1 x_2)u = f text in  Omega \n    fracpartial upartial x_2 = 0 text on  partial Omega\nendalign*","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"where f is a function in L^2(Omega) with compact support, and k  0 is the real wavenumber.","category":"page"},{"location":"tutorial/#Floquet-Bloch-theory","page":"Tutorial","title":"Floquet-Bloch theory","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"For simplicity, we only present necessary notions for computation. For more theoretical details, we refer to [1] and [2].","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"The parameter alpha is introduced by the Floquet-Bloch transform. And we always consider alpha in the Brillouin zone (-pip pip).","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Transfering the dependence on alpha from the function space to the PDE, we have the following boundary value problem","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"beginalign*\nDelta v + 2ialpha partial_1v + (k^2q(x_1 x_2) - alpha^2) v = 0 text in  Omega_0 \nfracpartial vpartial x_2 = 0 text on  partial Omega_0 \nv textis periodic with respect to  x_1\nendalign*","category":"page"},{"location":"tutorial/#Variational-formulation","page":"Tutorial","title":"Variational formulation","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"In this section, we present the variational formulation of the boundary value problem: Find v in H_per^1(Omega_0) satisfying","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"int_Omega_0 nabla v cdot nabla barphi - 2ialpha partial_1 v barphi - (k^2q(x_1 x_2) - alpha^2) v barphi dx = 0","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"After finite element discretization, we can obtain a generalized linear eigenvalue problem","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"mathbfA_alpha mathbfv = k^2 mathbfB mathbfv","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"where mathbfA_alpha comes from","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"int_Omega_0 nabla v cdot nabla barphi - 2ialpha partial_1 v barphi + alpha^2 v barphi dx ","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"and mathbfB comes from","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"int_Omega_0 q(x_1 x_2) v barphi dx","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"note: important steps in the computation\nWe use the Finite element method to discretize the variational formulation. In ClosedWaveguideDispersion.jl, all Finite element codes are implemented by Ferrite.jl\nAfter the Finite element discretization, we obtain a generalized linear eigenvalue problem parametered by alpha. We utilize Arpack.jl to solve the generalized linear eigenvalue problems with fixed alpha.","category":"page"}]
}
